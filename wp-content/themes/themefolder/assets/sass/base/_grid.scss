/*Add all grid options in here*/

@import "../sass-flex-mixin/_flex";

$grid-cols : 12 !default;
$gutter-width : 30px !default;
$max-width: 1440px !default;

$gutter-compensation: ($gutter-width * .5 * -1);
$half-gutter-width: ($gutter-width * .5);

@mixin flexboxgrid-sass-col-common {
	box-sizing: border-box;

	// split @include flex(0, 0, auto) into individual props
	@include flex-grow(0);
	@include flex-shrink(0);

	// we leave @include flex-basis(auto) out of common because
	// in some spots we need it and some we dont
	// more why here: https://github.com/kristoferjoseph/flexboxgrid/issues/126

	padding-right: $half-gutter-width;
	padding-left: $half-gutter-width;
}

@mixin col-loop($grid-cols, $name, $breakpoint ) {
	$i: 1;
	@while $i <= $grid-cols {
		$perc: unquote((100 / ( $grid-cols / $i)) + "%");
			&[class*="#{$name}"] {
		      @include flex-grow(1);
		      @include flex-basis(0);
		      max-width: 100%;
			}
			&.#{$name}#{$i} {
				@include flexboxgrid-sass-col-common;
				@include flex-basis(100% / $grid-cols * $i);
				max-width: 100% / $grid-cols * $i;
			}

			&.start-#{$name} {
				@include justify-content(flex-start);
				text-align: left;
			}

			&.center-#{$name} {
				@include justify-content(center);
				text-align: center;
			}

			&.end-#{$name} {
				@include justify-content(flex-end);
				text-align: right;
			}

			&.top-#{$name} {
				@include align-items(flex-start);
			}

			&.middle-#{$name} {
				@include align-items(center);
			}

			&.bottom-#{$name} {
				@include align-items(flex-end);
			}

			&.around-#{$name} {
				@include justify-content(space-around);
			}

			&.between-#{$name} {
				@include justify-content(space-between);
			}

			&.first-#{$name} {
				order: -1;
			}

			&.last-#{$name} {
				order: 1;
			}
		$i: $i + 1;
	}
	$i: 1;
	@while $i <= $grid-cols {
		$perc: unquote((100 / ( $grid-cols / $i)) + "%");
		&.offset-#{$name}#{$i} {
			@include flexboxgrid-sass-col-common;
			@if $i == 0 {
				margin-left: 0;
			} @else {
				margin-left: 100% / $grid-cols * $i;
			}
		}
		$i: $i + 1;
	}	
}

@mixin col-generator($grid-cols: 12, $name: null, $breakpoint: null ) {
	@if($breakpoint) {
		@include breakpoint($breakpoint) {
			@include col-loop($grid-cols, $name, $breakpoint);
		}
	} @else {
		@include col-loop($grid-cols, $name, $breakpoint);
	}
}


.wrap {
	margin: 0 auto;
	max-width: $max-width;
	width: 100%;

	padding-left: $half-gutter-width;
	padding-right: $half-gutter-width;

}

.wrap .row {
	margin-left: $gutter-compensation;
	margin-right: $gutter-compensation;
}

.row {
	@include flexbox();
	@include flex(0, 1, auto);
	@include flex-direction(row);
	@include flex-wrap(wrap);
	margin-right: $gutter-compensation;
	margin-left: $gutter-compensation;

	&.reverse {
  		@include flex-direction(row-reverse);		
	}

	.col {
		float: left;
		padding-left: $half-gutter-width;
		padding-right: $half-gutter-width;
		min-height: 1px;

		&.reverse {
			@include flex-direction(row-reverse);
		}

		@include col-generator($grid-cols, 'xs' );
		@include col-generator($grid-cols, 'sm', $sm );
		@include col-generator($grid-cols, 'md', $md );
		@include col-generator($grid-cols, 'lg', $lg );
		@include col-generator($grid-cols, 'xl', $xl );

	}//col
}//row